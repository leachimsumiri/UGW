export default class Event{constructor(t,e,i,s){this._id=t,this._description=e,this._location_id=i,this._location_description="",this._time=s,this._current_distance=0}get id(){return this._id}get description(){return this._description}get location_id(){return this._location_id}get location_description(){return this._location_description}get time(){return this._time}get current_distance(){return this._current_distance}set id(t){this._id=t}set description(t){this._description=t}set location_id(t){this._location_id=t}set location_description(t){this._location_description=t}set time(t){this._time=t}set current_distance(t){this._current_distance=t}}export default class Location{constructor(t,e,i,s,o){this._id=t,this._description=e,this._address=i,this._lat=s,this._long=o}get id(){return this._id}get description(){return this._description}get address(){return this._address}get lat(){return this._lat}get long(){return this._long}set id(t){this._id=t}set description(t){this._description=t}set address(t){this._address=t}set lat(t){this._lat=t}set long(t){this._long=t}}export default function(t,e,i,s){var o=.017453292519943295,r=Math.cos,o=.5-r((i-t)*o)/2+r(t*o)*r(i*o)*(1-r((s-e)*o))/2;return 12742*Math.asin(Math.sqrt(o))}import Vue from"vue";import App from"./App.vue";import Vuex from"vuex";import vuexStore from"./store/vuexStore";import vuetify from"./plugins/vuetify";Vue.use(Vuex),Vue.config.productionTip=!1;const store=new Vuex.Store(vuexStore);new Vue({vuetify:vuetify,store:store,render:t=>t(App)}).$mount("#app");import Vue from"vue";import Vuetify from"vuetify/lib";Vue.use(Vuetify);const opts={};export default new Vuetify(opts);import calculateDistance from"../geo_location/calculateDistance";export default{state:{events:[],locations:[]},getters:{filterByUserDefinedRadius:t=>e=>t.events.filter(t=>!t.current_distance||t.current_distance<=e)},mutations:{addEvent(t,e){t.events.find(t=>t.id===e.id)||t.events.push(e)},addLocation(t,e){t.locations.find(t=>t.id===e.id)||t.locations.push(e)},enrichEventsByLocationDescription(t){t.events.forEach(e=>{e.location_description=t.locations.find(t=>t.id===e.location_id).description})}},actions:{async enrichEventsByCurrentDistance({state:i},{lat:s,long:o}){var t=i.events.map(e=>{var t=i.locations.find(t=>t.id===e.location_id);e.current_distance=calculateDistance(t.lat,t.long,s,o).toFixed(2)});await Promise.all(t)}}};import{createClient}from"@supabase/supabase-js";import{OPTIONS,SUPABASE_URL,SUPABASE_KEY}from"../../config";const supabase=createClient(SUPABASE_URL,SUPABASE_KEY,OPTIONS);export default supabase;